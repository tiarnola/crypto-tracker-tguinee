{"version":3,"sources":["Coin.js","Form.js","RBSelect.js","App.js","reportWebVitals.js","index.js"],"names":["Coin","name","price","symbol","marketcap","volume","image","priceChange","currencySymbol","document","querySelector","className","src","alt","toLocaleString","toFixed","RBSelect","apiUrl","Boolean","App","useState","coins","setCoins","search","setSearch","displaycolor","React","useEffect","axios","get","then","res","data","console","log","catch","error","filteredCoins","filter","coin","toLowerCase","includes","type","onChange","e","target","value","placeholder","map","current_price","total_volume","market_cap","price_change_percentage_24h","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yQAuDeA,EApDF,SAAC,GAWP,IAVLC,EAUI,EAVJA,KACAC,EASI,EATJA,MACAC,EAQI,EARJA,OACAC,EAOI,EAPJA,UACAC,EAMI,EANJA,OACAC,EAKI,EALJA,MACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,eAMcC,SAASC,cAAc,SAErC,OAEF,8BAKI,qBAAKC,UAAU,iBAAf,SAGE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAKC,IAAKN,EAAOO,IAAI,WACrB,6BAAKZ,IACL,mBAAGU,UAAU,cAAb,SAA4BR,OAE9B,sBAAKQ,UAAU,YAAf,UACE,oBAAGA,UAAU,aAAb,UAA2BH,EAAe,IAAKN,KAC/C,oBAAGS,UAAU,cAAb,UAA4BH,EAAe,IAAKH,EAAOS,oBAEtDP,EAAc,EACb,oBAAGI,UAAU,mBAAb,UAAiCJ,EAAYQ,QAAQ,GAArD,OAEA,oBAAGJ,UAAU,qBAAb,UAAmCJ,EAAYQ,QAAQ,GAAvD,OAGF,oBAAGJ,UAAU,iBAAb,sBACYH,EAAe,IAAKJ,EAAUU,+BCdrCL,SAASC,cAAc,SCAvBM,ICxBXC,EAAS,2HAEH,IAAIC,SAAQ,GAwKPC,MAlKf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEA,EAA8BJ,mBAAS,OAAvC,mBAAOK,EAAP,KAEA,GAFA,KAE4BC,IAAMN,YAAlC,6BAsCCO,qBAAU,WACTC,IACGC,IACCZ,GAGDa,MAAK,SAAAC,GACJT,EAASS,EAAIC,MACbC,QAAQC,IAAIH,EAAIC,MAChBC,QAAQC,IAAIjB,MAEbkB,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,QAC7B,IAEH,IAIMC,EAAgBhB,EAAMiB,QAAO,SAAAC,GAAI,OACrCA,EAAKtC,KAAKuC,cAAcC,SAASlB,EAAOiB,eACxCD,EAAKpC,OAAOqC,cAAcC,SAASlB,EAAOiB,kBAK5C,OACE,sBAAK7B,UAAU,WAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,+BACE,uBACEA,UAAU,aACV+B,KAAK,OACLC,SAnBe,SAAAC,GACvBpB,EAAUoB,EAAEC,OAAOC,QAmBXC,YAAY,gBAIlB,wBAsDCV,EAAcW,KAAI,SAAAT,GAGjB,OACE,cAAC,EAAD,CAEEtC,KAAMsC,EAAKtC,KACXC,MAAOqC,EAAKU,cACZ9C,OAAQoC,EAAKpC,OACbC,UAAWmC,EAAKW,aAChB7C,OAAQkC,EAAKY,WACb7C,MAAOiC,EAAKjC,MACZC,YAAagC,EAAKa,4BACnB5C,eAAgBiB,GARVc,EAAKc,WCjJPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvD,SAASwD,eAAe,SAM1BX,M","file":"static/js/main.4e816797.chunk.js","sourcesContent":["import React from 'react';\nimport './Coin.css';\n//import Form from './Form';\nconst Coin = ({\n  name,\n  price,\n  symbol,\n  marketcap,\n  volume,\n  image,\n  priceChange,\n  currencySymbol\n  \n  \n}) => {\n\n  \n   const root = document.querySelector('#root');\n   //  ReactDOM.render(<Form />, root );\n  return (\n\n<div>\n    \n    \n    \n    \n    <div className='coin-container'>\n\n      \n      <div className='coin-row'>\n        <div className='coin'>\n          <img src={image} alt='crypto' />\n          <h1>{name}</h1>\n          <p className='coin-symbol'>{symbol}</p>\n        </div>\n        <div className='coin-data'>\n          <p className='coin-price'>{currencySymbol+\" \"}{price}</p>\n          <p className='coin-volume'>{currencySymbol+\" \"}{volume.toLocaleString()}</p>\n\n          {priceChange < 0 ? (\n            <p className='coin-percent red'>{priceChange.toFixed(2)}%</p>\n          ) : (\n            <p className='coin-percent green'>{priceChange.toFixed(2)}%</p>\n          )}\n\n          <p className='coin-marketcap'>\n            Mkt Cap: {currencySymbol+\" \"}{marketcap.toLocaleString()}\n          </p>\n        </div>\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default Coin;","import React from 'react';\nconst Form = props => {\n    const [gender, setGender] = React.useState();\n    const handleChange = e => {\n      const target = e.target;\n      if (target.checked) {\n        setGender(target.value);\n      }\n    };\n    const handleSubmit = e => {\n      e.preventDefault();\n      console.log(gender);\n    };\n    return (\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>\n            <input type=\"radio\" value=\"male\" checked={gender == 'male'} \n                   onChange={handleChange} />\n            <span>Male</span>\n          </label>\n          <label>\n            <input type=\"radio\" value=\"female\" checked={gender == 'female'} \n                   onChange={handleChange} />\n            <span>Female</span>\n          </label>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  };\n  \n  const root = document.querySelector('#root');\n//  ReactDOM.render(<Form />, root );\n  export default Form;","import React, {useState} from 'react';\n\nfunction RBSelect()\n{\n     let colors=[\"USD\",\"EUR\"];\n     const [displaycolor,setcolor]=useState(\"USD\");\n    return (\n\n        <div>\n            <center>\n            {/* <h1>ddd</h1>\n            <h2>dff</h2>\n            <hr /> */}\n            {colors.map(result=>(\n                <>\n            <input type=\"radio\" value={result} name=\"radiovalues\" checked={displaycolor===result} onChange={(e)=>setcolor(e.target.value)}/>\n            <b>{result}</b>\n            </>\n\n\n\n            ))\n\n            }\n            <h2>{displaycolor}</h2>\n            </center>\n        </div>\n\n    )\n\n\n}\nexport default RBSelect;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Coin from './Coin';\nimport Form from './Form';\nimport RBSelect from './RBSelect';\nimport ReactDOM from 'react-dom';\nimport './Coin.css';\nvar apiUrl = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false';\n\nconst x = new Boolean(false);\n\n\n\n//const root = document.querySelector('#root');\n\nfunction App() {\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState('');\n  let colors=[\"USD\",\"EUR\"];\n  const [displaycolor,setcolor]=useState(\"USD\");\n\n  const [gender, setGender] = React.useState();\n  //const [xchange, setXchange] = React.useState();\n    const handleChange = e => {\n      const target = e.target;\n      if (target.checked) {\n        setcolor(target.value);\n        apiUrl = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency='+ displaycolor +'&order=market_cap_desc&per_page=100&page=1&sparkline=false';\n        //useEffect();\n        handleSubmit();\n       \n        // if (gender === \"$\"){\n        //   apiUrl = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=100&page=1&sparkline=false'\n\n\n        // }\n\n        // else if (gender === \"â‚¬\"){\n        //   apiUrl = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false'\n\n\n        // }\n        \n\n      }\n    };\n    const handleSubmit = e => {\n      // e.preventDefault();\n      console.log(apiUrl);\n      \n    };\n\n   \n    \n    \n  \n   \n\n\n   useEffect(() => {\n    axios\n      .get(\n        apiUrl\n\n      )\n      .then(res => {\n        setCoins(res.data);\n        console.log(res.data);\n        console.log(apiUrl)\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  const handleCoinChange = e => {\n    setSearch(e.target.value);\n  };\n\n  const filteredCoins = coins.filter(coin =>\n    coin.name.toLowerCase().includes(search.toLowerCase())|\n    coin.symbol.toLowerCase().includes(search.toLowerCase())\n  );\n\n  \n\n  return (\n    <div className='coin-app'>\n      <div className='coin-search'>\n        <h1 className='coin-text'>Inpjvhut Currency</h1>\n        <form>\n          <input\n            className='coin-input'\n            type='text'\n            onChange={handleCoinChange}\n            placeholder='Search'\n          />\n        </form>\n      </div>\n      <div>\n      {/* RADIO BUTTONS OPTION\n      <div>\n            <center>\n            {/* <h1>ddd</h1>\n            <h2>dff</h2>\n            <hr /> * /}\n            {colors.map(result=>(\n                <>\n            <input type=\"radio\" value={result} name=\"radiovalues\" checked={displaycolor===result} onChange={handleChange}/>\n            <b>{\"vdfer\",\"c\"}</b>\n            </>\n\n\n\n            ))\n\n            }\n            <h2>{displaycolor}</h2>\n            </center>\n          </div>*/}\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      </div>\n      \n      {filteredCoins.map(coin => {\n\n\n        return (\n          <Coin\n            key={coin.id}\n            name={coin.name}\n            price={coin.current_price}\n            symbol={coin.symbol}\n            marketcap={coin.total_volume}\n            volume={coin.market_cap}\n            image={coin.image}\n            priceChange={coin.price_change_percentage_24h}\n           currencySymbol={displaycolor}\n           \n\n          />\n        );\n      })}\n    </div>\n  );\n}\n\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}